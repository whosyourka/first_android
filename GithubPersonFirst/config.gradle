ext {
    android = [
            compileSdkVersion: 27,
            buildToolsVersion: "27.0.2",
            minSdkVersion    : 21,
            targetSdkVeersion: 27,
    ]
    dependencies = [
            "rxandroid"                          : 'io.reactivex.rxjava2:rxjava:2.1.0',
            "rxjava"                             : 'io.reactivex.rxjava2:rxandroid:2.0.1',
            "retrofit2"                          : 'com.squareup.retrofit2:retrofit:2.3.0',
            "okhttp3"                            : 'com.squareup.okhttp3:okhttp:3.8.0',
            "interceptor"                        : 'com.squareup.okhttp3:logging-interceptor:3.4.1',
            "gson"                               : 'com.google.code.gson:gson:2.8.1',
            "converter-gson"                     : 'com.squareup.retrofit2:converter-gson:2.0.2',
            "scalars"                            : 'com.squareup.retrofit2:converter-scalars:2.3.0',//转换器
            "logger"                             : 'com.orhanobut:logger:1.13',

            "junit"                              : 'junit:junit:4.12',
            "appcompat-v7"                       : 'com.android.support:appcompat-v7:' + android.buildToolsVersion,
            "support-v4"                         : 'com.android.support:support-v4:' + android.buildToolsVersion,
            "recyclerview-v7"                    : 'com.android.support:recyclerview-v7:' + android.buildToolsVersion,
            "design"                             : 'com.android.support:design:23.1.1',
            "MaterialDesign"                     : 'com.github.navasmdc:MaterialDesign:1.5@aar',

//            "test"           : 'test',
    ]

    appVersionCode = 1
    //从svn自动获取tag
//    cmd = 'git rev-parse --short HEAD'
//    gitVersion = cmd.execute().text.trim()
    //应用名称
    appVersionName = "1.0." + appVersionCode
//    appVersionGitName = appVersionName + "." + gitVersion

    //设置对外部可以使用的输出函数
    setDefaultCon = this.&defaultConfig //todo 设置
    addBuildTimeListener = this.&addBuildTimeListener

    setApkName = this.&setApkName
    getDefaultSigningConfig = this.&getDefaultSigningConfig //todo 签名

}
//获取时间戳
//def getDate() {
//    def date = new Date()
//    def formattedDate = date.format('yyyyMMddHHmm')

//    return formattedDate
//}

//从androidManifest.xml中获取版本号
//def getVersionNameFromManifest() {
//    def manifestParser = new com.android.builder.core.DefaultManifestParser()
//    return manifestParser.getVersionName(android.sourceSets.main.manifest.srcFile)
//}

def disableDebugBuild() {
    //project.tasks包含了所有的tasks，下面的findAll是寻找那些名字中带debug的Task。
    //返回值保存到targetTasks容器中
    def targetTasks = project.tasks.findAll { task ->
        task.name.contains("Debug")
    }
    //对满足条件的task，设置它为disable。如此这般，这个Task就不会被执行
    targetTasks.each {
        println "disable debug task  :${it.name}"
        it.setEnabled false
    }
}

def defaultConfig() {
    android.dexOptions {
        incremental true
    }
    android.compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    android.lintOptions {
        // turn off checking the given issue id's
        disable 'TypographyFractions', 'TypographyQuotes'

        // turn on the given issue id's
        enable 'RtlHardcoded', 'RtlCompat', 'RtlEnabled'

        // check *only* the given issue id's
        check 'NewApi', 'InlinedApi'

        // turn off  error occur
        abortOnError false
    }
}

/**
 * 配置构建时间
 * @param gradle
 * @return
 */
def addBuildTimeListener(gradle) {
    gradle.addListener(new BuildTimeListener())
}

class BuildTimeListener implements TaskExecutionListener, BuildListener {
    private Clock clock
    private times = []

    @Override
    void beforeExecute(Task task) {
        clock = new org.gradle.util.Clock()
    }

    @Override
    void afterExecute(Task task, TaskState taskState) {
        def ms = clock.timeInMs
        times.add([ms, task.path])

        //task.project.logger.warn "${task.path} spend ${ms}ms"
    }

    @Override
    void buildFinished(BuildResult result) {
        println "Task spend time:"
        for (time in times) {
            if (time[0] >= 50) {
                printf "%7sms  %s\n", time
            }
        }
    }

    @Override
    void buildStarted(Gradle gradle) {}

    @Override
    void projectsEvaluated(Gradle gradle) {}

    @Override
    void projectsLoaded(Gradle gradle) {}

    @Override
    void settingsEvaluated(Settings settings) {}
}

/**
 * 设置默认签名
 * @return
 */
def getDefaultSigningConfig() {
    Closure closure = {
        keyAlias 'landi'
        keyPassword 'landi123456'
        storeFile file('./LandiApp.keystore')
        storePassword 'landi123456'
        v1SigningEnabled true
        v2SigningEnabled false
    }
    return closure
}

/**
 * 设置apk输出名字
 * @param appName
 * @param applicationVariants
 * @return
 */
def setApkName(String appName, applicationVariants) {
    //修改生成的apk名字
    applicationVariants.all { variants ->
        variants.outputs.all {
            variants.assemble.doLast {
                copy {
                    def releaseApkName = "./apk" + appName + '_V' + appVersionName + '_Build' +
                            new Date().format("yyMMdd").toString() + '.apk'
                    println './app/build/outputs/apk/release/' + outputFileName
                    from('./app/build/outputs/apk/release/' + outputFileName)
                    into('../apk/')
                    rename(outputFileName, releaseApkName)
                }
            }
        }
    }
}
